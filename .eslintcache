[{"/home/rahul/Coding/Javascript/ReactJS/weather/src/App.js":"1","/home/rahul/Coding/Javascript/ReactJS/weather/src/api/index.js":"2","/home/rahul/Coding/Javascript/ReactJS/weather/src/config/config.js":"3","/home/rahul/Coding/Javascript/ReactJS/weather/src/utility/utility.js":"4","/home/rahul/Coding/Javascript/ReactJS/weather/src/index.js":"5","/home/rahul/Coding/Javascript/ReactJS/weather/src/reportWebVitals.js":"6","/home/rahul/Coding/Javascript/ReactJS/weather/src/utility/getImages.js":"7","/home/rahul/Coding/Javascript/ReactJS/weather/src/components/DailyCityData/cityData.js":"8","/home/rahul/Coding/Javascript/ReactJS/weather/src/components/Chart/dayTimeChart.js":"9","/home/rahul/Coding/Javascript/ReactJS/weather/src/components/Atmosphere/Pressure.js":"10","/home/rahul/Coding/Javascript/ReactJS/weather/src/components/Chart/lineChart.js":"11","/home/rahul/Coding/Javascript/ReactJS/weather/src/components/Atmosphere/Atmosphere.js":"12","/home/rahul/Coding/Javascript/ReactJS/weather/src/components/UI/Input/input.js":"13","/home/rahul/Coding/Javascript/ReactJS/weather/src/components/UI/CityDetails/city.js":"14"},{"size":2548,"mtime":1608663356471,"results":"15","hashOfConfig":"16"},{"size":1645,"mtime":1608588883883,"results":"17","hashOfConfig":"16"},{"size":322,"mtime":1608545515062,"results":"18","hashOfConfig":"16"},{"size":286,"mtime":1608636809056,"results":"19","hashOfConfig":"16"},{"size":500,"mtime":1608468895835,"results":"20","hashOfConfig":"16"},{"size":362,"mtime":1608468895835,"results":"21","hashOfConfig":"16"},{"size":444,"mtime":1608587836045,"results":"22","hashOfConfig":"16"},{"size":1870,"mtime":1608600173516,"results":"23","hashOfConfig":"16"},{"size":1658,"mtime":1608641585062,"results":"24","hashOfConfig":"16"},{"size":727,"mtime":1608599814478,"results":"25","hashOfConfig":"16"},{"size":2351,"mtime":1608636851119,"results":"26","hashOfConfig":"16"},{"size":488,"mtime":1608599837328,"results":"27","hashOfConfig":"16"},{"size":4633,"mtime":1608670752180,"results":"28","hashOfConfig":"16"},{"size":1013,"mtime":1608651360142,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1x7mn3d",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rahul/Coding/Javascript/ReactJS/weather/src/App.js",[],"/home/rahul/Coding/Javascript/ReactJS/weather/src/api/index.js",[],["61","62"],"/home/rahul/Coding/Javascript/ReactJS/weather/src/config/config.js",[],"/home/rahul/Coding/Javascript/ReactJS/weather/src/utility/utility.js",[],"/home/rahul/Coding/Javascript/ReactJS/weather/src/index.js",[],"/home/rahul/Coding/Javascript/ReactJS/weather/src/reportWebVitals.js",[],["63","64"],"/home/rahul/Coding/Javascript/ReactJS/weather/src/utility/getImages.js",[],"/home/rahul/Coding/Javascript/ReactJS/weather/src/components/DailyCityData/cityData.js",[],"/home/rahul/Coding/Javascript/ReactJS/weather/src/components/Chart/dayTimeChart.js",[],"/home/rahul/Coding/Javascript/ReactJS/weather/src/components/Atmosphere/Pressure.js",[],"/home/rahul/Coding/Javascript/ReactJS/weather/src/components/Chart/lineChart.js",[],"/home/rahul/Coding/Javascript/ReactJS/weather/src/components/Atmosphere/Atmosphere.js",[],"/home/rahul/Coding/Javascript/ReactJS/weather/src/components/UI/Input/input.js",["65","66","67","68"],"import React, { useEffect, useState, useCallback } from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport { getCityCoords } from '../../../api/index';\nimport { returnImage } from '../../../utility/getImages';\n\nimport './input.css';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    width: '45rem',\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n  divider: {\n    height: 28,\n    margin: 4,\n  },\n  root1: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    width: '45rem',\n    justifyContent: 'space-between',\n    height: '50px'\n  },\n  temp: {\n    display: 'flex',\n    justifyContent: 'row',\n    alignItems: 'center'\n  }\n}));\n\nconst CustomizedInputBase = (props) => {\n\n  const { city } = props.location;\n\n  const [cityName, setCityName] = useState(city);\n  const [address, setAddress] = useState(\"\");\n  const [cities, setCities] = useState([]);\n  const [suggestions, setSuggestion] = useState([]);\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    setCityName(city);\n  }, [city])\n\n  const handleSelect = async(value) => {\n    const results = await geocodeByAddress(value);\n    try{\n      const city = results[0].address_components[0].long_name;\n      const data = await getCityCoords(city);\n      const { lat, lon } = data.city.coord;\n      props.getLocationWeatherReport({ lat, lon });\n      setCities([]);\n      setAddress(value);\n    } catch(err) {\n      alert('Cannot find weather for the selected city')\n    }\n  };\n\n  const renderCities = (getSuggestionItemProps) => {\n    return cities.map((city, index) => {\n        return (\n          <div key={index}>\n            <Paper\n              component=\"form\"\n              className={classes.root1}\n              style={{ zIndex: 100 }}\n              {...getSuggestionItemProps(city.suggestion)}>\n              <div>{city.name}, {city.country}</div>\n              <div className={classes.temp}>\n                <div>\n                  <h3 style={{ height: '10px' }}>{city.temp}<span>&#176;</span>C</h3>\n                  <h3>{city.weather}</h3>\n                </div>\n                <div>\n                  <img src={returnImage(city.weather)} width=\"40px\" height=\"40px\" alt={props.type} />\n                </div>\n              </div>\n            </Paper>\n          </div>\n        )\n    })\n  }\n\n  useEffect(async() => {\n    const currentCities = [];\n    for(const suggestion of suggestions) {\n      const cityName = suggestion.formattedSuggestion.mainText;\n      const countryName = suggestion.formattedSuggestion.secondaryText;\n      let data = await getCityCoords(cityName);\n      if(data !== undefined && data !== null && !data.error){\n        let obj = { suggestion, name: cityName, country: countryName, temp: data.city.main.temp, weather: data.city.weather[0].main}\n        currentCities.push(obj);\n      }\n    }\n    setCities(currentCities);\n  }, [suggestions])\n\n  const handleCities = (e, suggestions) => {\n    setCityName(e.target.value);\n    setSuggestion(suggestions);\n  }\n\n  return (\n    <PlacesAutocomplete value={address} onChange={setAddress} onSelect={handleSelect}>\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div>\n            <Paper component=\"form\" className={classes.root}>\n              <IconButton className={classes.iconButton} aria-label=\"menu\">\n                <LocationOnIcon />\n              </IconButton>\n\n              <InputBase\n                className={classes.input}\n                inputProps={{ 'aria-label': 'search google maps' }, { ...getInputProps({ placeholder: cityName }) }}\n                value={cityName}\n                fullWidth={true}\n                onChange={(e) => handleCities(e, suggestions)}\n                />\n              <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\n                <SearchIcon />\n              </IconButton>\n            </Paper>\n\n            <div>\n              {loading ? <div>...loading</div> : null}\n              {renderCities(getSuggestionItemProps)}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n    );\n}\n\nexport default CustomizedInputBase;","/home/rahul/Coding/Javascript/ReactJS/weather/src/components/UI/CityDetails/city.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"69","replacedBy":"73"},{"ruleId":"71","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":1,"column":38,"nodeType":"77","messageId":"78","endLine":1,"endColumn":49},{"ruleId":"75","severity":1,"message":"79","line":2,"column":48,"nodeType":"77","messageId":"78","endLine":2,"endColumn":57},{"ruleId":"80","severity":1,"message":"81","line":103,"column":13,"nodeType":"82","endLine":115,"endColumn":4},{"ruleId":"83","severity":1,"message":"84","line":133,"column":67,"nodeType":"85","messageId":"86","endLine":133,"endColumn":68},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],["87"],["88"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'getLatLng' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-global-assign","no-unsafe-negation"]